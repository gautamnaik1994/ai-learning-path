{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AI Learning Path","text":"<p>This repository provides a structured learning path for mastering AI and Machine Learning, covering essential concepts, tools, and techniques. The path is divided into beginner, intermediate, and advanced levels, with each section building on the previous one.</p>"},{"location":"#learning-paths","title":"Learning Paths","text":"<p>If you are trying to learn Generative AI, you need to have at least basic understanding of Machine Learning. After that, you can follow the Gen AI Learning Path.</p>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>This document outlines the prerequisites for diving into the AI and Machine Learning learning paths. It covers essential concepts, tools, and techniques that you should be familiar with before starting your journey.</p> <p>Before diving into AI and Machine Learning, ensure you have a solid understanding of the following concepts:</p> <ul> <li> <p>Python and <code>pip</code> package management: Familiarity with Python programming and how to manage packages using <code>pip</code> is essential for working with various libraries and frameworks in AI and Machine Learning.</p> </li> <li> <p>Google Colab or Jupyter Notebooks: These tools are commonly used for interactive coding and data analysis. They allow you to write and execute Python code in a web-based environment, making it easier to visualize data and share your work with others.</p> </li> </ul> <p>Info</p> <p>I recommend using Google Colab for its ease of use and accessibility. One doesnt need to install anything locally, and it provides free access to GPUs for training models. However, if you prefer a local setup, Jupyter Notebooks is a great alternative.</p>"},{"location":"prerequisites/#local-setup","title":"Local Setup","text":"<ol> <li> <p>Python Installation: Ensure you have Python installed on your local machine. You can download it from the official Python website. Make sure to install <code>pip</code>, which is included with Python installations.</p> </li> <li> <p>Visual Studio Code: Download and install Visual Studio Code, a popular code editor that supports Python development. Install the Python Data Science ExtensionPack. You will be able to run Jupyter Notebooks directly in VS Code, which is a great feature for data science projects.</p> </li> </ol>"},{"location":"deep-learning/","title":"Deep Learning","text":"<p>Follow these steps to build a strong foundation in deep learning.</p>"},{"location":"deep-learning/#pre-requisites","title":"Pre-requisites","text":"<p>There are 2 major frameworks for deep learning: PyTorch and TensorFlow. Familiarity with either of these will be beneficial. But my personal preference is PyTorch. It can be installed easily, and it has a very good community support. You can also use Google Colab or Jupyter Notebooks for running your code.</p> <p>Initially, you might find it difficult, but it will become easier with practice.</p>"},{"location":"deep-learning/#beginner","title":"Beginner","text":"<ol> <li> <p>Core Concepts</p> <ul> <li> <p>What is deep learning and how it differs from traditional ML.</p> </li> <li> <p>Neurons, weights, and biases.</p> </li> <li> <p>Activation functions (ReLU, sigmoid, tanh).</p> </li> <li> <p>Loss functions and optimization.</p> </li> <li> <p>Introduction to overfitting and regularization.</p> </li> </ul> </li> <li> <p>Math Prerequisites (Basics)</p> <ul> <li> <p>Linear algebra (vectors, matrices, dot product).</p> </li> <li> <p>Basic calculus (derivatives, gradients).</p> </li> <li> <p>Probability &amp; statistics fundamentals.</p> </li> </ul> </li> <li> <p>Hands-on Basics</p> <ul> <li> <p>Install PyTorch</p> </li> <li> <p>Build a simple feedforward neural network for MNIST digit classification.</p> </li> <li> <p>Visualize training curves (loss vs. accuracy).</p> </li> </ul> </li> </ol>"},{"location":"deep-learning/#resources","title":"Resources","text":""},{"location":"deep-learning/#intermediate","title":"Intermediate","text":"<p>Goal: Be comfortable implementing and tuning different deep learning architectures.</p> <ol> <li> <p>Key Topics</p> <ul> <li> <p>Convolutional Neural Networks (CNNs) for images.</p> </li> <li> <p>Recurrent Neural Networks (RNNs), LSTMs, and GRUs for sequences.</p> </li> <li> <p>Transformers (basic introduction).</p> </li> <li> <p>Dropout, batch normalization, and data augmentation.</p> </li> <li> <p>Optimizers: SGD, Adam, learning rate schedules.</p> </li> </ul> </li> <li> <p>Model Training Practices</p> <ul> <li> <p>Training/validation/test split.</p> </li> <li> <p>Early stopping and checkpointing.</p> </li> <li> <p>Transfer learning with pre-trained models.</p> </li> </ul> </li> <li> <p>Hands-on Projects</p> <ul> <li> <p>Image classification with CNNs on CIFAR-10.</p> </li> <li> <p>Sentiment analysis on IMDB dataset using LSTMs.</p> </li> <li> <p>Fine-tuning BERT for a text classification task.</p> </li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/","title":"Generative AI Learning Path","text":"<p>This document outlines a structured learning path for mastering Generative AI, covering essential concepts, tools, and techniques. The path is divided into beginner, intermediate, and advanced levels, with each section building on the previous one.</p>"},{"location":"gen-ai-learning-path/#pre-requisites","title":"Pre-requisites","text":"<p>Before diving into Generative AI, ensure you have a understanding of the following concepts:</p> <ul> <li>Python and <code>pip</code> package management</li> <li>Google Colab or Jupyter Notebooks</li> </ul>"},{"location":"gen-ai-learning-path/#beginner-level","title":"Beginner Level","text":"<ul> <li>Familiarity with machine learning concepts like training, testing, and evaluation metrics.</li> <li>Understanding of how neural networks work.</li> <li>Natural Language Processing (NLP) fundamentals.</li> <li>Using Hugging Face Transformers library.</li> <li>Tokenization and text preprocessing techniques.</li> <li>Understanding of vectors and similarity measures.</li> <li>Understanding of word embeddings.</li> </ul>"},{"location":"gen-ai-learning-path/#resources","title":"Resources","text":""},{"location":"gen-ai-learning-path/#free-llm-apis","title":"Free LLM APIS","text":"<ul> <li> <p>Together AI</p> <ul> <li>Go to models page and search for free models.</li> <li>You also get $5 free credits to use on their platform.</li> </ul> </li> <li> <p>Groq</p> <ul> <li>Offers some level of free usage.  </li> </ul> </li> <li> <p>Google Gemini</p> <ul> <li>Offers free access to some of their Gemini models.</li> </ul> </li> <li> <p>If you have good GPU on you local machine, you can use Llama.cpp.</p> <ul> <li>Its good for prototyping and testing LLM code locally but do not expect high performance.</li> </ul> </li> </ul>"},{"location":"gen-ai-learning-path/#courses","title":"Courses","text":"<ul> <li>https://developers.google.com/machine-learning/crash-course</li> </ul>"},{"location":"gen-ai-learning-path/#projects","title":"Projects","text":"<ol> <li>Text Classification with Transformers</li> <li>Build a text classification model using Hugging Face Transformers for sentiment analysis.</li> <li> <p>Try experimenting with different pre-trained models.</p> </li> <li> <p>Experiment with LLM APIs</p> <ul> <li>Use free LLM APIs to generate text based on prompts.</li> <li>Compare the outputs of different models.</li> <li>Experiment with different prompt structures to see how they affect the generated text.</li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/#intermediate-level","title":"Intermediate Level","text":"<ul> <li>Understanding of LLMs (Large Language Models)</li> <li>Prompt engineering techniques.</li> <li>RAG (Retrieval-Augmented Generation) concepts.</li> <li>Vector databases and their applications (FAISS, Pinecone, Qdrant).</li> <li>Text extraction from various formats (PDF, DOCX, Image) using <code>pdfplumber</code>, <code>pytesseract</code>.</li> <li>LangChain framework.</li> </ul>"},{"location":"gen-ai-learning-path/#resources_1","title":"Resources","text":""},{"location":"gen-ai-learning-path/#courses_1","title":"Courses","text":"<ul> <li>Daily Dose of Data Science I highly recommend this blog for practical AI skills. This is a paid resource but worth the investment. If possible subscribe for Lifetime membership.</li> <li>LLM Course by Hugging Face</li> <li>LangChain Mastery in 2025 | Full 5 Hour Course LangChain v0.3</li> <li>Complete Gen AI Langchain - This is paid Udemy course. The course is 54hrs, but start from \"Intro to GenAI module\"</li> </ul>"},{"location":"gen-ai-learning-path/#vector-dbs","title":"Vector DBs","text":"<ul> <li>Pinecone<ul> <li>Free tier available with limited usage.</li> </ul> </li> <li>Qdrant<ul> <li>Docker image available for local setup.</li> </ul> </li> <li>FAISS<ul> <li>Available as a library for local use.</li> </ul> </li> </ul>"},{"location":"gen-ai-learning-path/#projects_1","title":"Projects","text":"<ol> <li> <p>RAG Implementation</p> <ul> <li>Implement a RAG system using a combination of retrieval and generation techniques.</li> </ul> </li> <li> <p>Document Summarization</p> <ul> <li>Develop a document summarization tool using LLMs.</li> </ul> </li> <li> <p>Vector Database Exploration</p> <ul> <li>Explore the use of vector databases for storing and retrieving embeddings.</li> <li>Implement a simple application that uses a vector database for semantic search.</li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/#advanced-level","title":"Advanced Level","text":"<ul> <li>Memory Management in LangChain.</li> <li>LangGraph for building complex workflows using agents.</li> <li>Model Context Protocol.</li> <li>OCR (Optical Character Recognition) techniques.</li> <li>Advanced chunking techniques for LLMs.</li> <li>Pytorch Deep Learning framework.</li> <li>Fine tuning LLMs using PEFT.</li> </ul>"},{"location":"gen-ai-learning-path/#resources_2","title":"Resources","text":"<ul> <li>Enterprise AI Tutorial \u2013 Embeddings, RAG, and Multimodal Agents Using Amazon Nova and Bedrock - Watch at 2x speed</li> <li>Agentic AI With LangGraph</li> <li>Introduction to LangGraph</li> </ul>"},{"location":"gen-ai-learning-path/#projects_2","title":"Projects","text":"<ol> <li> <p>Advanced RAG System</p> <ul> <li>Build a sophisticated RAG system that integrates multiple data sources and advanced retrieval techniques.</li> <li>Implement advanced chunking techniques to optimize the retrieval process.</li> <li>Integrate Vision capabilities using OCR for processing images and PDFs.</li> </ul> </li> <li> <p>Custom LLM Fine-tuning</p> <ul> <li>Try fine-tuning a very small LLM using PEFT(Lora, QLoRA)</li> <li>Fine-tune a pre-trained LLM on a specific domain or dataset.</li> </ul> </li> <li> <p>LangGraph Workflow</p> <ul> <li>Create a workflow using LangGraph that involves multiple agents and tasks.</li> <li>Supervisor Agents and Hierarchical Agents.</li> </ul> </li> <li> <p>Multi-modal Agent</p> <ul> <li>Use text + image input (e.g., invoice parser or medical report assistant).</li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/#deployment-production-concepts","title":"Deployment &amp; Production Concepts","text":"<ul> <li>Understanding of containerization (Docker).</li> <li>Familiarity with at least one cloud platform (AWS, GCP, Azure) for deploying models.</li> <li>Familiarity with Backend frameworks (Flask, FastAPI) for building APIs.</li> <li>Knowledge of CI/CD pipelines for model deployment.</li> <li>Monitoring and logging practices for production systems.</li> </ul>"},{"location":"gen-ai-learning-path/agents/","title":"Agents","text":"<p>Agents are autonomous entities that can perform tasks, make decisions, and interact with their environment. In the context of AI, agents can leverage large language models (LLMs) to understand and generate human-like text, enabling them to perform complex tasks such as answering questions, providing recommendations, or even engaging in conversations.</p>"},{"location":"gen-ai-learning-path/agents/#projects","title":"Projects","text":""},{"location":"gen-ai-learning-path/agents/#supervised-agents","title":"Supervised Agents","text":"<ul> <li>Supervisor<ul> <li>Analyst</li> <li>Researcher</li> <li>Writer</li> </ul> </li> </ul>"},{"location":"gen-ai-learning-path/agents/#hierarchical-agents","title":"Hierarchical Agents","text":"<ul> <li>CEO (top level)<ul> <li>Research Team Leader<ul> <li>Data Researcher</li> <li>Market Researcher</li> </ul> </li> <li>Writing Team Leader<ul> <li>Technical Writer</li> <li>Summary Writer</li> </ul> </li> </ul> </li> </ul> <p>Task Conduct a comprehensive market research analysis and generate a detailed report. CEO will delegate tasks to team leaders, who will further delegate to their team members. for example, the Research Team Leader will ask the Data Researcher to gather data and the Market Researcher to analyze market trends.  The Research Team Leader will then compile the findings and present them to the CEO. The CEO will then ask the Writing Team Leader to write a detailed report based on the findings. The Writing Team Leader will delegate tasks to the Technical Writer and Summary Writer. The Technical Writer will write a technical report, while the Summary Writer will summarize the findings for a broader audience.</p>"},{"location":"gen-ai-learning-path/agents/#resources","title":"Resources","text":"<ul> <li>Agentic AI With LangGraph</li> <li>Introduction to LangGraph</li> </ul>"},{"location":"gen-ai-learning-path/mcp/","title":"Model Context Protocol (MCP)","text":""},{"location":"gen-ai-learning-path/mcp/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a framework designed to enhance the interaction between large language models (LLMs) and external data sources. It provides a structured way to manage the context in which LLMs operate, allowing them to access and utilize external information effectively.</p>"},{"location":"gen-ai-learning-path/mcp/#resources","title":"Resources","text":"<ul> <li>MCP Crash Course</li> <li>Fast MCP</li> </ul>"},{"location":"gen-ai-learning-path/mcp/#projects","title":"Projects","text":"<p>MCP Implementation</p> <ul> <li>Replace all tools used in the previous projects with MCP.</li> </ul>"},{"location":"gen-ai-learning-path/mcp/#example-mcp-server","title":"Example MCP Server","text":"<pre><code>from fastmcp import FastMCP, Client\nfrom tavily import TavilyClient\nimport logging\nimport os\nimport asyncio\n\n\nlogging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\nTAVILY_API_KEY = \"your_tavily_api_key_here\"\n\nmcp = FastMCP(\"My MCP Server\")\ntavily_client = TavilyClient(api_key=TAVILY_API_KEY)\n\n\n@mcp.tool()\nasync def search_web(query: str) -&gt; str:\n    \"\"\"Search the web for information.\"\"\"\n    logger.info(f\"-----MCP: Searching for: {query}\")\n    response = tavily_client.search(query, limit=3)\n    results = response.get(\"results\", [])\n\n    # Extract summaries from results\n    summaries = [\n        f\"Title: {item['title']}\\nURL: {item['url']}\\nContent: {item['content'][:300]}...\"\n        for item in results\n    ]\n\n    return \"\\n\\nGautam\\n\\n\".join(summaries)\n\n\n@mcp.tool()\nasync def write_summary(content: str) -&gt; str:\n    \"\"\"Write a summary of the provided content.\"\"\"\n    summary = f\"Summary of findings:\\n\\n{content[:500]}...\"\n    return summary\n\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\") # Always use \"streamable-http\" when building apis with MCP\n</code></pre>"},{"location":"gen-ai-learning-path/mcp/#example-mcp-client","title":"Example MCP Client","text":"<pre><code>from langchain_mcp_adapters.client import MultiServerMCPClient\nfrom langchain.chat_models import init_chat_model\n\nclient = MultiServerMCPClient(\n    {\n        \"example\": {\n            # make sure you start your weather server on port 8000\n            \"url\": \"http://localhost:8000/mcp/\",\n            \"transport\": \"streamable_http\",\n        }\n    }\n)\nmcp_tools = await client.get_tools()\n\n\n\nllm=init_chat_model(\"groq:llama-3.1-8b-instant\")\nllm_with_tools = llm.bind_tools(mcp_tools)\n</code></pre>"},{"location":"gen-ai-learning-path/rag/","title":"Retrieval-Augmented Generation (RAG)","text":"<p>Retrieval-Augmented Generation (RAG) is a powerful technique that combines the strengths of retrieval systems and generative models. It allows for more accurate and contextually relevant responses by retrieving information from external sources before generating text.</p>"},{"location":"gen-ai-learning-path/rag/#beginner","title":"Beginner","text":"<p>Goal: Understand what RAG is, why it\u2019s used, and be able to make a basic working example.</p> <ol> <li> <p>Core Concepts</p> <ul> <li> <p>What is RAG and how it differs from plain LLM prompts.</p> </li> <li> <p>Retrieval vs. Generation.</p> </li> <li> <p>Embeddings and vector similarity search basics.</p> </li> <li> <p>Chunking &amp; preprocessing text.</p> </li> <li> <p>High-level RAG pipeline: Document \u2192 Embedding \u2192 Store \u2192 Retrieve \u2192 Generate.</p> </li> </ul> </li> <li> <p>Hands-on Basics</p> <ul> <li> <p>Install and use a vector database (e.g., FAISS, Chroma).</p> </li> <li> <p>Create embeddings with OpenAI, Hugging Face, or similar.</p> </li> <li> <p>Build a small local RAG demo:     Example: \u201cAsk questions about a PDF or Wikipedia article.\u201d</p> </li> <li> <p>Try a no-code/low-code RAG tool like LlamaIndex or LangChain templates.</p> </li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/rag/#resources","title":"Resources","text":"<ul> <li>Learn RAG From Scratch \u2013 Python AI Tutorial from a LangChain Engineer</li> </ul>"},{"location":"gen-ai-learning-path/rag/#intermediate","title":"Intermediate","text":"<p>Goal: Move from toy demos to small production-ready prototypes with better accuracy.</p> <ol> <li> <p>Improving Retrieval Quality</p> <ul> <li> <p>Advanced chunking strategies (semantic vs. fixed-size).</p> </li> <li> <p>Metadata filtering (date, category, author).</p> </li> <li> <p>Hybrid search: combining keyword + vector search.</p> </li> <li> <p>Handling multilingual data.</p> </li> </ul> </li> <li> <p>Optimizing Context for the LLM</p> <ul> <li> <p>Context window limits and token budgeting.</p> </li> <li> <p>Summarization before passing to the LLM.</p> </li> <li> <p>Prompt engineering for RAG (system prompts, few-shot examples).</p> </li> </ul> </li> <li> <p>System Integration</p> <ul> <li> <p>Creating APIs for your RAG pipeline.</p> </li> <li> <p>Basic caching to save costs.</p> </li> <li> <p>Connecting RAG to structured data (SQL + vector retrieval).</p> </li> </ul> </li> <li> <p>Hands-on Project</p> <ul> <li> <p>Build a domain-specific knowledge assistant (e.g., for finance, legal, internal docs).</p> </li> <li> <p>Add filters, rerankers, and logging for retrieval results.</p> </li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/rag/#advanced","title":"Advanced","text":"<p>Goal: Handle large datasets, improve retrieval relevance, and make RAG adaptive.</p> <ol> <li> <p>Scaling RAG</p> <ul> <li> <p>Distributed vector search (Weaviate, Milvus, Pinecone, Elasticsearch).</p> </li> <li> <p>Incremental indexing &amp; real-time updates.</p> </li> <li> <p>Retrieval over billions of documents.</p> </li> </ul> </li> <li> <p>Improving Accuracy</p> <ul> <li> <p>Reranking with cross-encoders (BERT, monoT5).</p> </li> <li> <p>Query rewriting for better retrieval.</p> </li> <li> <p>Multi-hop retrieval for reasoning across multiple docs.</p> </li> </ul> </li> <li> <p>RAG Variants &amp; Hybrid Models</p> <ul> <li> <p>Fusion-in-Decoder (FiD) architectures.</p> </li> <li> <p>Retrieval-augmented fine-tuning (RAFT).</p> </li> <li> <p>Combining RAG with Agents (tools + reasoning).</p> </li> </ul> </li> <li> <p>Monitoring &amp; Maintenance</p> <ul> <li> <p>Evaluating RAG quality (precision@k, recall@k, MRR).</p> </li> <li> <p>Detecting hallucinations.</p> </li> <li> <p>Feedback loops for continuous improvement.</p> </li> </ul> </li> <li> <p>Advanced Project</p> <ul> <li> <p>Deploy a real-time, multi-source RAG system pulling from APIs, PDFs, databases, and live web data.</p> </li> <li> <p>Implement relevance feedback loops and active learning.</p> </li> </ul> </li> </ol>"},{"location":"gen-ai-learning-path/rag/#resources_1","title":"Resources","text":"<p>RAG Fundamentals and Advanced Techniques \u2013 Full Course</p>"},{"location":"machine-learning/","title":"Machine Learning","text":"<p>To get started with machine learning, you can follow a structured learning path that progresses from beginner to advanced levels. Below is a comprehensive guide to help you navigate through the essential concepts, tools, and projects in machine learning.</p>"},{"location":"machine-learning/#pre-requisites","title":"Pre-requisites","text":"<p>Before diving into machine learning, ensure you have a solid understanding of the following concepts:</p> <ul> <li>Python and <code>pip</code> package management</li> <li>Google Colab or Jupyter Notebooks</li> </ul>"},{"location":"machine-learning/#resources","title":"Resources","text":"<p>If you want small videos, try the following playlist. I highly recommend it. Also check other playlists on the channel. These are very important for understanding the concepts.</p> <ul> <li>Machine Learning by StatQuest</li> </ul> <p>One can start also with the following courses, Try both.</p> <ul> <li>https://developers.google.com/machine-learning/crash-course</li> <li>Machine Learning for Everybody \u2013 Full Course</li> </ul>"},{"location":"machine-learning/#next-steps","title":"Next Steps","text":"<p>Try applying the concepts you learn in the courses by working on small projects. Here are some project ideas to get you started:</p>"},{"location":"machine-learning/#machine-hack","title":"Machine Hack","text":"<p>This is a platform similar to Kaggle, but it is more focused on Indian audience. It has a lot of competitions and datasets that you can explore. Also the difficulty level of the competitions is a bit lower than Kaggle, so it is a good place to start if you are new to machine learning. Here is the link to the website: Machine Hack</p>"},{"location":"machine-learning/#kaggle","title":"Kaggle","text":"<p>Once you feel comfortable with the basics of machine learning, visit Kaggle website and start exploring datasets. Kaggle is a great platform to practice your skills, participate in competitions, and learn from the community. They have a inbuilt code editor and you can run your code in the browser without installing anything on your local machine. Also, they regularly host competitions where you can apply your skills to real-world problems. Here is the link to the website: Kaggle</p>"},{"location":"machine-learning/#maths-and-statistics","title":"Maths and Statistics","text":"<p>Once you are comfortable with the basics of machine learning, and its libraries, you can start learning about the mathematical and statistical concepts that underpin machine learning algorithms. This is important to understand how the algorithms work and how to tune them for better performance.</p> <p>The following youtube channel has every mathematical concept for machine learning explained in a simple way. StatQuest with Josh Starmer</p> <p>Also, there is a Youtuber named Krish Naik who has a lot of videos on machine learning, data science, and deep learning. He explains the concepts in a simple way and also provides practical examples. Here is the link to his channel: Krish Naik</p>"}]}